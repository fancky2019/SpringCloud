spring:
  application:
    name: gateway-service

  redis:
    #  数据库索引
    database: 3
    # 远程服务器地址
    host: 127.0.0.1
    # 远程服务器端口
    port: 6379
    # 验证码
    password: fancky123456
    # 链接超时时间（毫秒）
    timeout: 50

  cloud:
    gateway:
      # default-filters:
      discovery:      #是否与服务发现组件进行结合，通过 serviceId(必须设置成大写) 转发到具体的服务实例。默认为false，设为true便开启通过服务中心的自动根据 serviceId 创建路由的功能。
        locator:      #路由访问方式：http://Gateway_HOST:Gateway_PORT/大写的serviceId/**，其中微服务应用名默认大写访问。
          #http://localhost:8080/USER/user?name=a
          enabled: true
          # 将请求路径上的服务名配置为小写（因为服务注册的时候，向注册中心注册时将服务名转成大写的了）如：server-->注册中心SERVER
          lowerCaseServiceId: true
      routes:
        - id:  163
          uri: http://www.163.com/
          predicates:
            # 转发该路径
            - Path=/usera/**
          # 带前缀
          filters:
            - StripPrefix=1
        #id 必须大写，名称随便REGISTERCENTER
        - id: registercenter
          # lb代表从注册中心获取服务，SERVER:为注册中心的服务名称
          #会用自带的负载均衡
          uri: lb://SERVER
          predicates:
            #路径要对应，区分大小写
            - Path=/userservice/**
          filters:
            #从/userservice/**开始转发跳过的目录数，StripPrefix=1跳过/userservice/
            - StripPrefix=1
            # RedisRateLimter RequestRateLimiter
            - name: RequestRateLimiter
              args:
                # 先启动Redis不停刷新连接  报错：HTTP ERROR 429（too many request），证明成功
                # 允许用户每秒处理多少个请求 10
                redis-rate-limiter.replenishRate: 1
                # 令牌桶的容量，允许在一秒钟内完成的最大请求数 20
                redis-rate-limiter.burstCapacity: 2
                # 使用SpEL按名称引用bean，在配置文件中定义的名称
                key-resolver: "#{@ipKeyResolver}"
#        - id: registercenter1
#          # lb代表从注册中心获取服务，SERVER:为注册中心的服务名称
#          #会用自带的负载均衡
#          uri: lb://SERVER1
#          predicates:
#            #路径要对应，区分大小写
#            - Path=/userservice1/**
#          filters:
#            #从/userservice/**开始转发跳过的目录数，StripPrefix=1跳过/userservice/
#            - StripPrefix=1

#注册到注册中心，分发调用注册中心的服务。
eureka:
  client:
    # Eureka Server地址
    service-url:
      defaultZone: http://localhost:8761/eureka/
#注意：服务中心和提供的服务都要启动
#打开链接测试，不停刷新会发现负载均衡
#http://localhost:8080/userservice/user?name=a

